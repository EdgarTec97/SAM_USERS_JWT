AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  users-microservice

  Sample SAM Template for users-microservice

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60
    Environment:
      Variables:
        TABLE_NAME: !Ref TableName
        DEPLOY_ENVIRONMENT: !Ref DeployEnviroment
        AWS_REGION: !Ref AWSRegion
        IS_OFFLINE: !Ref IsOffline #change this to false for deploy in aws or true for use in offline
        DYNAMOHOST: !Ref DynamoHost
        DYNAMO_PORT: 4566

Parameters:
  TableName:
    Type: String
  DeployEnviroment:
    Type: String
  IsOffline:
    Type: String
  DynamoHost:
    Type: String

Resources:
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        # Defining table attributes
        - AttributeName: id
          AttributeType: S
        - AttributeName: username
          AttributeType: S
        - AttributeName: email
          AttributeType: S
        - AttributeName: age
          AttributeType: N
      KeySchema:
        # Primary Key Definition
        - AttributeName: id
          KeyType: HASH
        - AttributeName: age
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: UsernameIndex
          KeySchema:
            # Secondary Global Index Key Definition
            - AttributeName: username
              KeyType: HASH
          Projection:
            # Specifies which attributes should be projected to the index
            ProjectionType: ALL
        - IndexName: EmailIndex
          KeySchema:
            # Secondary Global Index Key Definition
            - AttributeName: email
              KeyType: HASH
          Projection:
            # Specifies which attributes should be projected to the index
            ProjectionType: ALL

  CreateUser:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/functions/
      Handler: create-user.handler
      Runtime: nodejs18.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /create
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - create-user.ts

  GetUserById:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/functions/
      Handler: get-user-by-id.handler
      Runtime: nodejs18.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /get/{userId}
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - get-user-by-id.ts

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CreateUser:
    Description: API Gateway endpoint URL for Prod stage for CreateUser function
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/create/'
